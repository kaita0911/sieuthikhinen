@using System.Data.Entity;
@model Article
@{
    Layout = "_LayoutAccount.cshtml";
    DataContext db = new DataContext();
    var articleType = (ViewBag.ArticleType as ArticleType);
    ViewBag.Title = "Sửa thông tin " + articleType.ArticleTypeDetail[SiteConfig.LanguageId].Name;

    var multiProperties = articleType.Properties.Where(p => p.MultiLanguage);
    var nonProperties = articleType.Properties.OrderByDescending(p => p.PropertyType).Where(p => !p.MultiLanguage);

    var categories = Category.GetTree(articleType.Categories);
    var discounts = db.Discounts.ToList();
    var currencies = db.Currencies.ToList();
    ViewBag.Article = Model;
    ViewBag.ArticleCateType = db.Articles.Include(a => a.Categories).FirstOrDefault(a => a.Id == Model.Id);
    ViewBag.DiscountArticle = db.Articles.Include(a => a.Discounts).FirstOrDefault(a => a.Id == Model.Id);
    ViewBag.Breadcrumb = new BreadcrumbModel
    {
        Items = new BreadcrumbItem[] {
new BreadcrumbItem { Url="/", Text="Home", IsFirst=true},
new BreadcrumbItem { Url=Url.Action("List","Article", new{id= Model.ArticleTypeId}), Text="Danh sách " + Model.ArticleType.Name},
new BreadcrumbItem { Url=null, Text="Chỉnh sửa bài viết", IsLast=true}}
    };
    var article = Model;
}

<div class="acc-product acc-edit-pro">
    <h1 class="heading"></h1>
    <div class="row content">
        <div class="col-md-2 col-sm-4 col-sm-12 left-menu">
            @Html.Partial("_MenuProductAc")
        </div>
        <div class="col-md-10 col-sm-8 col-sm-12 right-ctn">
            <div class="form">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.ValidationSummary(true)
                    @Html.Hidden("returnUrl", new { returnUrl = ViewBag.ReturnUrl })
                    <div class="toolbar">
                        <span class="button">
                            <button type="submit" class="btn save"><i class="fa fa-save"></i> Save</button>
                        </span>
                        <span class="btn back">
                            <a href="@Request.UrlReferrer">
                                <i class="fa fa-mail-reply"></i> <span>Trở về</span>
                            </a>
                        </span>
                    </div>
                    <div class="row">
                        <div class="col-md-9 col-sm-9 col-xs-12 left width-70">
                            <div id="tabs">
                                <ul class="nav nav-tabs" role="tablist" id="myTab">
                                    @foreach (var l in SiteConfig.Languages)
                                    {
                                        <li><a href="#tabs-@l.Id" role="tab" data-toggle="tab">@l.DisplayName</a></li>
                                    }
                                </ul>
                                <div class="tab-content">
                                    @foreach (var l in SiteConfig.Languages)
                                    {
                                        <div id="tabs-@l.Id">
                                            <div class="editor-label">
                                                @Html.Label("tiêu đề")
                                            </div>
                                            <div class="editor-field">
                                                @Html.TextBoxFor(model => model.ArticleDetail[l.Id].ArticleName, new { name = "txtName_" + l.Id.ToString(), @class = "url-source" })
                                                @Html.ValidationMessageFor(model => model.ArticleDetail[l.Id].ArticleName, "Tiêu đề không được trống và không dài quá 200 ký tự")
                                            </div>
                                            <div class="editor-label @(!articleType.SiteMap ? "hidden" : "")">
                                                @Html.Label("url")
                                            </div>
                                            <div class="editor-field @(!articleType.SiteMap ? "hidden" : "")">
                                                @Html.TextBoxFor(model => model.ArticleDetail[l.Id].UrlFriendly, new { name = "txtUrl_" + l.Id.ToString(), @class = "url-dest" })
                                            </div>
                                            @if (articleType.HasShorDesc)
                                            {
                                                <div class="editor-label short-desc">
                                                    @Html.Label("mô tả ngắn gọn")
                                                </div>
                                                <div class="editor-field">
                                                    @Html.TextAreaFor(model => model.ArticleDetail[l.Id].ShortDesc, new { @class = "fck" })
                                                </div>
                                            }
                                            @if (articleType.HasDescription)
                                            {
                                                <div class="editor-label full-desc">
                                                    @Html.Label("mô tả chi tiết")
                                                </div>
                                                <div class="editor-field margin-bottom-7">
                                                    @Html.TextAreaFor(model => model.ArticleDetail[l.Id].Description, new { @class = "fck" })
                                                </div>
                                            }
                                            @if (articleType.HasMeta)
                                            {
                                                <div class="editor-label">
                                                    @Html.Label("meta keywords")
                                                </div>
                                                <div class="editor-field">
                                                    @Html.TextBoxFor(model => model.ArticleDetail[l.Id].SEOKeywords, new { @class = "keyword" })
                                                    @Html.ValidationMessageFor(model => model.ArticleDetail[l.Id].SEOKeywords, "Không được dài quá 200 ký tự")
                                                </div>
                                                <div class="editor-label">
                                                    @Html.Label("meta description")
                                                </div>
                                                <div class="editor-field">
                                                    @Html.TextBoxFor(model => model.ArticleDetail[l.Id].SEODescription)
                                                    @Html.ValidationMessageFor(model => model.ArticleDetail[l.Id].SEODescription, "Không được dài quá 200 ký tự")
                                                </div>
                                            }
                                            @foreach (var item in multiProperties.Where(m => m.PropertyType != PropertyType.MULTICHOICE && m.PropertyType != PropertyType.CHOICE && m.PropertyType != PropertyType.HASPRICE))
                                            {
                                                var prop_id = "P_" + item.Id.ToString() + "_" + l.Id.ToString();
                                                <div class="editor-label">
                                                    @Html.Label(item.PropertyDetail[SiteConfig.LanguageId].Name)
                                                </div>
                                                <div class="editor-field">
                                                    @Html.TextBox(prop_id, Model.PropertyValues.DefaultIfEmpty(new ArticlePropertyValue { ArticleId = Model.Id, PropertyId = item.Id }).FirstOrDefault(pv => pv.PropertyId == item.Id && pv.LanguageId == l.Id) != null ? Model.PropertyValues.DefaultIfEmpty(new ArticlePropertyValue { ArticleId = Model.Id, PropertyId = item.Id }).FirstOrDefault(pv => pv.PropertyId == item.Id && pv.LanguageId == l.Id).Value : "")
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                            <script>
                                $(".nav-tabs li:first").addClass("active");
                                $(".tab-content .tab-pane:first").addClass("active");
                            </script>
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12 right width-29">
                            <div style="display:@(articleType.Code.ToLower() == "adv"?"block":"none")">
                                <div class="editor-label">
                                    @Html.Label("Id quảng cáo")
                                </div>
                                <div class="editor-field">
                                    @Html.EditorFor(model => model.Id)
                                </div>
                            </div>
                            <div class="editor-label">
                                @Html.Label("thứ tự")
                            </div>
                            <div class="editor-field">
                                @Html.EditorFor(model => model.SortOrder)
                                @Html.ValidationMessageFor(model => model.SortOrder)
                            </div>
                            @if (articleType.HasImage)
                            {
                                <div class="editor-label">
                                    @Html.Label("hình đại diện")
                                </div>
                                @Html.HiddenFor(model => model.ImageUrl)
                                <div class="editor-field file file-image article">
                                    <input type="hidden" id="Upload" name="Upload" />
                                    @Html.TextBox("multiple_file", null, new { type = "file", data_val = "true", data_val_image = "Kiểu file hình ảnh không được phép", multiple = "multiple", id = "multiple_file" })<i data-label="Chọn file"></i>
                                    <span id="number">Không tệp tin nào được chọn</span>
                                </div>
                                <div id="previewFiles" class="editor-field">
                                </div>
                            }
                            @if (articleType.HasAttachment)
                            {
                                <div class="editor-label">
                                    @Html.Label("file đính kèm")
                                </div>
                                <div class="editor-field file article">
                                    @Html.TextBox("Attachment", null, new { type = "file", data_val = "true", data_val_attach = "Kiểu file đính kèm không được phép" })<i data-label="Chọn file"></i>
                                    @Html.ValidationMessage("Attachment")
                                </div>
                            }
                            @if (articleType.HasRating)
                            {
                                <div class="editor-label">
                                    @Html.Label("Đánh giá (sao)")
                                </div>
                                <div class="editor-fiel rating">
                                    @for (var i = 0; i <= 5; i++)
                                    {
                                        <label class="radio">
                                            @Html.RadioButtonFor(model => model.Rating, i, null)<i></i> @i
                                        </label>
                                    }
                                </div>
                            }

                            @if (articleType.IsNew || articleType.IsHot || articleType.IsMostView)
                            {
                                <div class="editor-label hidden">
                                    @Html.Label("thuộc tính")
                                </div>
                                <div class="editor-field hidden">
                                    <ul>
                                        @if (articleType.IsNew)
                                        {
                                            <li><label class="checkbox">@Html.CheckBoxFor(model => model.IsNew)<i></i> @((articleType.StrIsNew != null && articleType.StrIsNew != "") ? articleType.StrIsNew : "Mới")</label></li>
                                        }
                                        @if (articleType.IsHot)
                                        {
                                            <li><label class="checkbox">@Html.CheckBoxFor(model => model.IsHot)<i></i> @((articleType.StrIsHot != null && articleType.StrIsHot != "") ? articleType.StrIsHot : "Nổi bật")</label></li>
                                        }
                                        @if (articleType.IsMostView)
                                        {
                                            <li><label class="checkbox">@Html.CheckBoxFor(model => model.IsMostView)<i></i> @((articleType.StrIsMostView != null && articleType.StrIsMostView != "") ? articleType.StrIsMostView : "Xem nhiều")</label></li>
                                        }
                                        <li style="display: none"><label class="checkbox">@Html.CheckBoxFor(model => model.IsSpecial)<i></i> Đặt biệt</label></li>
                                        <li style="display: none"><label class="checkbox">@Html.CheckBoxFor(model => model.IsSoldOut)<i></i> Hết hàng từ nhà cung cấp</label></li>
                                        <li style="display: none"><label class="checkbox">@Html.CheckBoxFor(model => model.IsShowHome)<i></i> Hiển thị trang chủ</label></li>
                                    </ul>
                                </div>
                            }
                            @if (articleType.Id == 2)
                            {
                                <div class="editor-label hidden">
                                    @Html.Label("Quyền được xem")
                                </div>
                                <div class="editor-field hidden">
                                    <ul>
                                        <li><label class="checkbox">@Html.CheckBoxFor(model => model.IsMember)<i></i>Thành viên</label></li>
                                    </ul>
                                </div>
                            }
                            @if (Roles.IsUserInRole("Super Administrators") && articleType.IsFullWidth)
                            {
                                <div class="editor-field">
                                    <ul>
                                        <li><label class="checkbox"> @Html.CheckBoxFor(model => model.FullWidth)<i></i> Layout FullWidth</label></li>
                                    </ul>
                                </div>
                            }
                            @foreach (var item in multiProperties.Where(m => m.PropertyType == PropertyType.CHOICE || m.PropertyType == PropertyType.MULTICHOICE || m.PropertyType == PropertyType.HASPRICE))
                            {
                                <div class="editor-label">
                                    @Html.Label(item.PropertyDetail[SiteConfig.LanguageId].Name)
                                </div>
                                <div class="editor-field">
                                    @switch (item.PropertyType)
                                    {
                                        case PropertyType.MULTICHOICE:
                                            <ul>
                                                @foreach (var pmv in item.PropertyMultiValues)
                                                {
                                                    <li>
                                                        <label class="checkbox">
                                                            @if (article.PropertyMultiValues != null)
                                                            {
                                                                <input name="pmv_multichoice" type="checkbox" value="@pmv.Id" class="check" @(article.PropertyMultiValues.Any(p => p.Id == pmv.Id) ? "checked" : "") />
                                                            }
                                                            else
                                                            {
                                                                <input name="pmv_multichoice" type="checkbox" value="@pmv.Id" class="check" />
                                                            }
                                                            <i></i>@pmv.PropertyMultiValueDetail[1].Value
                                                        </label>
                                                    </li>
                                                }
                                            </ul>
                                            break;
                                        case PropertyType.HASPRICE:
                                            <ul>
                                                @foreach (var pmv in item.PropertyMultiValues)
                                                {
                                                    var price_id = "Price_" + pmv.Id.ToString();
                                                    var currency_id = "Currency_" + pmv.Id.ToString();
                                                    var price_value = Model.Prices.DefaultIfEmpty(new Price { ArticleId = Model.Id, PropertyMultiValueId = pmv.Id }).FirstOrDefault(pv => pv.PropertyMultiValueId == pmv.Id);
                                                    <li>
                                                        <div class="p-left">
                                                            @pmv.PropertyMultiValueDetail[1].Value
                                                        </div>
                                                        <div class="p-right">
                                                            <div class="editor-field">
                                                                <div class="ctn-price">
                                                                    @Html.TextBox(price_id, price_value == null ? "" : string.Format("{" + price_value.Formating + "}", price_value.Value), new { @class = "price" })
                                                                    @Html.DropDownList(currency_id, new SelectList(currencies, "Id", "CurrencySymbol", currencies.FirstOrDefault(c => c.IsDefault).Id), new { @class = "currency" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                            break;
                                        case PropertyType.CHOICE:
                                            if (item.PropertyMultiValues.Count > 0)
                                            {
                                                int p_id = 0;
                                                if (article != null)
                                                {
                                                    if (article.PropertyMultiValues.FirstOrDefault(p => p.PropertyId == item.Id) != null)
                                                    { p_id = article.PropertyMultiValues.FirstOrDefault(p => p.PropertyId == item.Id).Id; }
                                                }

                                                var multiVal = from p in item.PropertyMultiValues
                                                               select new { Id = p.Id, Value = p.PropertyMultiValueDetail[SiteConfig.LanguageId].Value };

                                                @Html.DropDownList("pmv_choice", new SelectList(multiVal, "Id", "Value", p_id), "-- Chọn giá trị --", new { @class = "form-control" })
                                            }
                                            break;
                                    }
                                </div>

                            }
                            @foreach (var item in nonProperties.Where(p =>p.Id != 10))
                            {
                                var prop_id = "P_" + item.Id.ToString();
                                var prop_value = Model.PropertyValues.DefaultIfEmpty(new ArticlePropertyValue { ArticleId = Model.Id, PropertyId = item.Id }).FirstOrDefault(pv => pv.PropertyId == item.Id);
                                <div class="editor-label">
                                    @Html.Label(item.PropertyDetail[SiteConfig.LanguageId].Name)
                                </div>
                                <div class="editor-field">
                                    @switch (item.PropertyType)
                                    {
                                        case PropertyType.STRING:
                                            @Html.TextBox(prop_id, prop_value == null ? "" : prop_value.Value)
                                            break;
                                        case PropertyType.TEXT:
                                            @Html.TextArea(prop_id, prop_value == null ? "" : prop_value.Value)
                                            break;
                                        case PropertyType.NUMERIC:
                                            @Html.TextBox(prop_id, prop_value == null ? "" : prop_value.Value, new { type = "number", @class = "form-control" })

                                            break;
                                        case PropertyType.HTML:
                                            @Html.TextArea(prop_id, prop_value == null ? "" : prop_value.Value, new { @class = "fck-img" })
                                            break;
                                        case PropertyType.BOOLEAN:
                                            @Html.CheckBox(prop_id, prop_value == null ? false : prop_value.Value == "true,false" ? true : false)
                                            break;
                                        case PropertyType.MULTICHOICE:
                                            <ul>
                                                @foreach (var pmv in item.PropertyMultiValues)
                                                {
                                                    <li>
                                                        <label class="checkbox">
                                                            @if (article.PropertyMultiValues != null)
                                                            {
                                                                <input name="pmv_multichoice" type="checkbox" value="@pmv.Id" class="check" @(article.PropertyMultiValues.Any(p => p.Id == pmv.Id) ? "checked" : "") />
                                                            }
                                                            else
                                                            {
                                                                <input name="pmv_multichoice" type="checkbox" value="@pmv.Id" class="check" />
                                                            }
                                                            <i></i>@pmv.PropertyMultiValueDetail[1].Value
                                                        </label>
                                                    </li>
                                                }
                                            </ul>
                                            break;
                                        case PropertyType.CHOICE:
                                            if (item.PropertyMultiValues.Count > 0)
                                            {
                                                int p_id = 0;
                                                if (article != null)
                                                {
                                                    if (article.PropertyMultiValues.FirstOrDefault(p => p.PropertyId == item.Id) != null)
                                                    { p_id = article.PropertyMultiValues.FirstOrDefault(p => p.PropertyId == item.Id).Id; }
                                                }

                                                var multiVal = from p in item.PropertyMultiValues
                                                               select new { Id = p.Id, Value = p.PropertyMultiValueDetail[SiteConfig.LanguageId].Value };

                                                @Html.DropDownList("pmv_choice", new SelectList(multiVal, "Id", "Value", p_id), "-- Chọn giá trị --", new { @class = "form-control" })
                                            }
                                            break;
                                        case PropertyType.HASPRICE:
                                            <ul>
                                                @foreach (var pmv in item.PropertyMultiValues)
                                                {
                                                    var price_id = "Price_" + pmv.Id.ToString();
                                                    var currency_id = "Currency_" + pmv.Id.ToString();
                                                    var price_value = Model.Prices.DefaultIfEmpty(new Price { ArticleId = Model.Id, PropertyMultiValueId = pmv.Id }).FirstOrDefault(pv => pv.PropertyMultiValueId == pmv.Id);
                                                    <li>
                                                        <div class="p-left">
                                                            @pmv.PropertyMultiValueDetail[1].Value
                                                        </div>
                                                        <div class="p-right">
                                                            <div class="editor-field">
                                                                <div class="ctn-price">
                                                                    @Html.TextBox(price_id, price_value == null ? "" : string.Format("{" + price_value.Formating + "}", price_value.Value), new { @class = "price" })
                                                                    @Html.DropDownList(currency_id, new SelectList(currencies, "Id", "CurrencySymbol", currencies.FirstOrDefault(c => c.IsDefault).Id), new { @class = "currency" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                            break;
                                        default:
                                            @Html.TextBox(prop_id, prop_value == null ? "" : prop_value.Value)
                                            break;
                                    }
                                </div>
                            }
                            @if (articleType.HasPrice)
                            {
                                <div class="editor-label">
                                    @Html.Label("Giá")
                                </div>
                                <div class="editor-field pri-and-curr">
                                    @Html.TextBox("Price", string.Format("{" + (!string.IsNullOrWhiteSpace(Model.FormatPrice) ? Model.FormatPrice : "#.###") + "}", Model.Price), new { @class = "price" })
                                    @Html.DropDownList("currencyId", new SelectList(currencies, "Id", "CurrencySymbol"), new { @class = "currency" })
                                </div>
                                <div class="editor-field pri-and-curr margin-5-0">
                                    <label class="checkbox">
                                        @Html.CheckBox("chk-inactive", Model.InactivePrice, new { @class = "inactive" })<i></i> <b>Ẩn giá này</b>
                                    </label>
                                </div>
                                if (articleType.HasNumberProduct)
                                {
                                    <div class="editor-label">
                                        @Html.Label("Số lượng:")
                                    </div>
                                    <div class="editor-field pri-and-curr">
                                        @Html.TextBoxFor(model => model.Number, new { @type = "number", @class = "form-control" })
                                    </div>
                                    <br />
                                }
                                if (articleType.HasDiscount && discounts.Count > 0)
                                {
                                    <div class="editor-label hidden">
                                        @Html.Label("giảm giá")
                                    </div>
                                    <div class="editor-field hidden">
                                        @Html.Partial("~/Areas/Admin/Views/Discount/_SearchList.cshtml", discounts)
                                    </div>
                                }

                            }
                            @if (articleType.HasCategory && categories.Count > 0)
                            {
                                <div>
                                    @Html.Label("chọn nhóm")
                                    @Html.Partial("~/Areas/Admin/Views/Category/_SearchList.cshtml", categories)
                                </div>
                            }
                            @foreach (var item in articleType.CategoryTypes)
                            {
                                var lst = db.Categories.Include("CategoryDetail").Where(c => c.CategoryTypeId == item.Id).ToList();
                                if (lst.ToList().Count > 0)
                                {
                                    var tree = Category.GetTree(lst.ToList());
                                    <br />
                                    <div>
                                        @Html.Label("chọn " + item.Name.ToLower())
                                        @Html.Partial("~/Areas/Admin/Views/Category/_SearchListByCateType.cshtml", tree)
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="toolbar">
                        <span class="button">
                            <button type="submit" class="btn save"><i class="fa fa-save"></i> Save</button>
                        </span>
                        <span class="btn back">
                            <a href="@Request.UrlReferrer">
                                <i class="fa fa-mail-reply"></i> <span>Trở về</span>
                            </a>
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@section Scripts{
    @Scripts.Render("~/bundles/admin")
    @Scripts.Render("~/bundles/dcaccordion")
    @Scripts.Render("~/Scripts/ckeditor/ckeditor.js")
    <script type="text/javascript">
            CKEDITOR_BASEPATH = "@Url.Content("~/Scripts/ckeditor/")";
    </script>
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")

    <script>
        $(function () {
            $(".keyword").keyword();
            $("#tabs").validtabs();
            $(".url-source").each(function () {
                $(this).latinize({ destination: $(".url-dest", $(this).parent().parent()) });
            });
            function RemoveRougeChar(e) {
                if (e.substring(0, 1) == ",") {
                    return e.substring(1, e.length)
                } return e
            }

            $(".price").keyup(function (e) {
                if (e.which >= 37 && e.which <= 40) {
                    e.preventDefault()
                }
                var t = $(this);
                var n = t.val().replace(/,/gi, "").split("").reverse().join("");
                var r = RemoveRougeChar(n.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                t.val(r);
            })
        });
    </script>
    @if (!string.IsNullOrWhiteSpace(SiteConfig.SiteInfo.ApiKey) && articleType.HasPoster)
    {
        <script src="https://autopost.viennam.info/scripts/fb.js?apiKey=@SiteConfig.SiteInfo.ApiKey"></script>
        <script>
            var time = null;
            var autoPoster = new AutoPoster();
            autoPoster.check(function (data) {
                if (data.status == -1) {
                    $(".facebook-posts").remove();
                }
                else {
                    $(".facebook-posts").removeClass("hidden");
                }
            });
            $(".post").on("click", function () {
                var _this = $(this);
                var _parent = _this.parents(".btn-group");
                $.ajax({
                    url: _this.data("submit"),
                    data: {
                        id: _this.data("id")
                    },
                    beforeSend: function () {
                        _parent.find(".autopost").animate({ opacity: '0' });
                        _parent.find(".autupost-loading").fadeIn('slow');
                        $("#sys-notification").fadeOut("slow");
                        clearTimeout(time);
                    },
                    success: function (data) {
                        if (data.Status == -1)
                            alert(data.Message);
                        else {
                            $("#sys-notification").fadeIn("slow");
                            time = setTimeout(function () {
                                $("#sys-notification").fadeOut("slow");
                            }, 5000);
                        }
                        _parent.find(".autopost").animate({ opacity: '1' });
                        _parent.find(".autupost-loading").fadeOut('slow');

                        return false;
                    },
                });
            });
            $(".post-edit").on("click", function () {
                var _this = $(this);
                var _parent = _this.parents(".btn-group");
                $.ajax({
                    url: _this.data("submit"),
                    dataType: "html",
                    data: {
                        id: _this.data("id")
                    },
                    beforeSend: function () {
                        _parent.find(".autopost").animate({ opacity: '0' });
                        _parent.find(".autupost-loading").fadeIn('slow');
                        clearTimeout(time);
                    },
                    success: function (html) {
                        $("#auopost-modal").html(html);
                        _this.addClass("posting");
                        _parent.find(".autopost").animate({ opacity: '1' });
                        _parent.find(".autupost-loading").fadeOut('slow');
                        _parent.find(".auopost-modal").trigger("click");
                        return false;
                    },
                });
            });
            function Success() {
                var _parent = $(".post-edit.posting").parents(".btn-group");
                $("#sys-notification").fadeIn("slow");
                _parent.find(".auopost-modal").trigger("click");
                $("#autopost-form input, #autopost-form textarea").val("");
                time = setTimeout(function () {
                    $("#sys-notification").fadeOut("slow");
                }, 5000);
                return false;
            }
        </script>
    }

}
